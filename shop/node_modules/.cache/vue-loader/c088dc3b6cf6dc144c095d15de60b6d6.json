{"remainingRequest":"E:\\study\\junior\\shop\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!E:\\study\\junior\\shop\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!E:\\study\\junior\\shop\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\study\\junior\\shop\\src\\components\\Layout.vue?vue&type=template&id=005bfc5a&","dependencies":[{"path":"E:\\study\\junior\\shop\\src\\components\\Layout.vue","mtime":1623916179788},{"path":"E:\\study\\junior\\shop\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\study\\junior\\shop\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"E:\\study\\junior\\shop\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\study\\junior\\shop\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}