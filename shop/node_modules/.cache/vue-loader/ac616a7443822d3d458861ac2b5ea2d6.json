{"remainingRequest":"D:\\jessica\\workspcae\\GitHub\\mooc2\\shop\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!D:\\jessica\\workspcae\\GitHub\\mooc2\\shop\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\jessica\\workspcae\\GitHub\\mooc2\\shop\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\jessica\\workspcae\\GitHub\\mooc2\\shop\\src\\components\\Layout.vue?vue&type=template&id=005bfc5a&","dependencies":[{"path":"D:\\jessica\\workspcae\\GitHub\\mooc2\\shop\\src\\components\\Layout.vue","mtime":1624323793818},{"path":"D:\\jessica\\workspcae\\GitHub\\mooc2\\shop\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1624095269746},{"path":"D:\\jessica\\workspcae\\GitHub\\mooc2\\shop\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":1624095349406},{"path":"D:\\jessica\\workspcae\\GitHub\\mooc2\\shop\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1624095269746},{"path":"D:\\jessica\\workspcae\\GitHub\\mooc2\\shop\\node_modules\\vue-loader\\lib\\index.js","mtime":1624095349404}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}